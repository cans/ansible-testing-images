version: "2"
settings:

  conductor:
    # The Conductor container does the heavy lifting, and provides a portable
    # Python runtime for building your target containers. It should be derived
    # from the same distribution as you're building your target containers with.
    base: debian:9
    # roles_path:   # Specify a local path containing Ansible roles
    # volumes:      # Provide a list of volumes to mount
    # environment:  # List or mapping of environment variables

  # Set the name of the project. Defaults to basename of the project directory.
  # For built services, concatenated with service name to form the built image name.
  project_name: ansible-testing

  # The deployment_output_path is mounted to the Conductor container, and the
  # `run` and `deployment` commands then write generated Ansible playbooks to it.
  deployment_output_path: ./ansible-deployment

  # When using the k8s or openshift engines, use the following to authorize with the API.
  # Values set here will be passed to the Ansible modules. Any file paths will be mounted
  # to the conductor container, allowing the `run` command to access the API.
  #k8s_auth:
    # path to a K8s config file
    #config_file:
    # name of a context found within the config file
    #context:
    # URL for accessing the K8s API
    #host:
    # An API authentication token
    #api_key:
    # Path to a ca cert file
    #ssl_ca_cert:
    # Path to a cert file
    #cert_file:
    # Path to a key file
    #key_file:
    # boolean, indicating if SSL certs should be validated
    #verify_ssl:

  # When using the k8s or openshift engines, use the following to set the namespace.
  # If not set, the project name will be used. For openshift, the namespace maps to a project,
  # and description and display_name are supported.
  #k8s_namespace:
  #  name:
  #  description:
  #  display_name:

services:
  # Add your containers here, specifying the base image you want to build from.
  # To use this example, uncomment it and delete the curly braces after services key.
  # You may need to run `docker pull ubuntu:trusty` for this to work.
  base:
    command: ['/bin/sh', '-c', 'while true ; do sleep 10 ; done']
    entrypoint: ['/usr/bin/dumb-init']
    from: "debian:stretch"
    roles:
      # Try order roles:
      # - from least to most likely to be modified (either the role itself or its arguments).
      # - but respecting dependencies
      - role: "cans.package-install"
        pkginstall_cache_purge: true
        pkginstall_packages:
          - bash
          - ca-certificates  # For CircleCI. This limits the image's lifespan (certificates expire).
          - dumb-init
          - python2.7-minimal
          - python3.5-minimal
          - python-pip
          - python3-pip
          - python-virtualenv
          - python3-venv
          - sudo
      # Role "cans.user-make" require sudo (!? to check)
      - role: "cans.user-make"
        usermake_upload_ssh_key_to_target: false
        usermake_users:
          - name: "admin"
            sudoer: true
            passwordless_sudo: true
          - name: "regular"
            sudoer: false

  ssh:
    command: ['/usr/sbin/sshd', '-D', '-p', '2222']
    entrypoint: ['/usr/bin/dumb-init']
    from: "ansible-testing-base:latest"
    ports:
      - 2222:2222
    roles:
      - role: "cans.directory-make"
        dirmake_directories:
          - path: "/run/sshd"
            mode: 755
      - role: "cans.package-install"
        pkginstall_cache_ttl: 1
        pkginstall_cache_update: true
        pkginstall_cache_purge: true
        pkginstall_packages:
          - openssh-server

  pgclient:
    command: ['/bin/sh', '-c', 'while true ; do sleep 10 ; done']
    entrypoint: ['/usr/bin/dumb-init']
    from: "ansible-testing-base:latest"
    roles:
      - role: "cans.package-install"
        pkginstall_cache_ttl: 1
        pkginstall_cache_update: true
        pkginstall_cache_purge: true
        pkginstall_packages:
          - postgresql-client-9.6
          - python-psycopg2
          - python3-psycopg2

  pgserver:
    # command: ['/bin/su', 'postgres', '-c', '/usr/lib/postgresql/9.6/bin/postgres -D /var/lib/postgresql/9.6/main -c config_file=/etc/postgresql/9.6/main/postgresql.conf']
    command: ['/usr/bin/pg_ctlcluster', '--foreground', '-o', '"-h 0.0.0.0"', '-o', '"-p 5432"', '-o', '"-i"', '9.6', 'main', 'start']
    entrypoint: ['/usr/bin/dumb-init', ]
    from: "ansible-testing-pgclient:latest"
    ports:
      - 54320:5432
    roles:
      - role: "cans.package-install"
        pkginstall_cache_ttl: 1
        pkginstall_cache_update: true
        pkginstall_cache_purge: true
        pkginstall_packages:
          - postgresql-9.6
          # Do we want to add some additional pg extensions ?


registries:
  docker:
    url: https://index.docker.io/v1/
    namespace: ncaniart
  # Add optional registries used for deployment. For example:
  #  google:
  #    url: https://gcr.io
  #    namespace: my-cool-project-xxxxxx

# vim: et:sw=2:syntax=yaml:ts=2:
